#!/bin/bash
# vim:ft=sh sts=4 ts=4 expandtab

# 切换到本脚本(gsectl)所在的目录，并设置WORK_HOME变量为上一级目录
cd ${BASH_SOURCE%/*} 2>/dev/null
WORK_HOME=${PWD%/bin}

# 设置agent的max open files
ulimit -n 409600 2>/dev/null

usage () {
    echo "useage: gsectl ACTION [MODULE_NAME ... ]"
    echo ""
    echo "ACTION list: start, stop, restart"
    echo " start    start gse_agent"
    echo " stop     stop gse_agent"
    echo " restart  restart gse_agent"
}

# 停止agent
stop () {
    # 调用gse_agent --quit停止进程，并等待它退出
    if [ -f ./gse_agent ]; then
        ( ./gse_agent --quit ) >/dev/null 2>&1
        sleep 3
    else
        echo "no such file: gse_agent. "
        return 1
    fi
    _status 
    # 状态码为2的时候，表示进程不存在的了
    if [[ $? -eq 2 ]]; then
        echo "gse agent stop successful"
    else
        echo "gse agent stop failed"
        return 1
    fi
}

start () {
    local ret=0

    echo "start gse_agent ..."
    ( ./gse_agent -f $WORK_HOME/etc/agent.conf ) >/dev/null 2>&1; sleep 3

    # 最多等待20s来判断是否真正启动成功
    for i in {0..20}; do
	    if _status >/dev/null; then
            # 启动正常，直接退出，返回码0
            echo "gse agent start successful"
            exit 0
        elif [ $i -eq 20 ]; then
            # i等于20，超时退出，返回码1
            echo "gse agent start failed"
            exit 1
        else
            sleep 1
        fi
    done
}

restart () {
    stop $module && start $module
}

status () {
    local rt
    local -a info

    info=( $(_status) )
    rt=$?
	case $rt in
        0) status="pid:${info[0]} etime:${info[1]} RUNNING" ;;
        1) status="ERROR STATUS" ;;
        2) status="EXIT" ;;
    esac
    printf "%s: %s\n" "gse_agent" "$status"
    return $rt
}

# 返回码：
# 0: 正常，且成对出现
# 1：异常，存在master进程但是worker不存在
# 2: 异常，没有master进程存在
_status () {
    local gse_master_info _pid pid abs_path
    local gse_master_pids=()
    
    # 初筛，考虑到gse组件的父进程都是名为gseMaster的，且它的父进程应该是等于1
    # ps的-o参数指定输出字段%P(ppid)、%p(pid)、%a(args)
    # 所以下面命令是拉出所有进程名为gseMaster，且父进程为1，进程参数包含gse_agent的进程信息
    # 进程信息以竖线分隔为三列。
    gse_master_info=$(ps --no-header -C gseMaster -o '%P|%p|%a' | awk -F'|' '$1 == 1 && $3 ~ /gse_agent/')
    if [[ -z "$gse_master_info" ]]; then
        # 连master都没有，那不用做更深入的判断，直接返回false
        return 2
    else
        # master既然存在，先判断路径是否包含WORK_HOME
        gse_master_pids=( $(echo "$gse_master_info" | awk -F'|' '{print $2}') )
        for _pid in "${gse_master_pids[@]}"; do
            abs_path=$(readlink -f /proc/$_pid/exe)
            abs_path=$(echo "${abs_path}" | sed 's/ (deleted)$//')  # 防止异常情况下二进制更新但是还没重启进程
            # 两个路径都用readlink -f 防止有软链接目录
            if [ "$abs_path" == "$(readlink -f ${WORK_HOME}/bin/gse_agent)" ]; then
                # 找到了匹配的pid
                pid=$_pid
                break
            fi
        done
    
        if [[ -z "$pid" ]]; then
            # 没有匹配WORK_HOME的master，返回fasle
            return 2
        else
            # 查看该gseMaster进程是否子进程Worker(>=1)
            if [[ $(pgrep -P $pid | wc -l) -eq 0 ]]; then
                return 1
            fi
        fi
    fi
    # 运行到这里时就可以获取进程状态详细信息输出到STDOUT，并返回0了
    ps --no-header -p $pid -o pid,etime
    return 0
}

# main
action="$1"; shift

case $action in
    start) start ;;
    stop) stop ;;
    restart) restart ;;
    status) status ;;
    -h|*) usage ; exit 255 ;;
esac

exit $?
